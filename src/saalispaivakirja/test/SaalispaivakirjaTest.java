package saalispaivakirja.test;
// Generated by ComTest BEGIN
import saalispaivakirja.SailoException;
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import saalispaivakirja.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.29 20:23:03 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class SaalispaivakirjaTest {

  // Generated by ComTest BEGIN  // Saalispaivakirja: 15
  private Saalispaivakirja saalispaivakirja; 
  private Merkinta m1; 
  private Merkinta m2; 
  private int mid1; 
  private int mid2; 
  private Saalis hauki11; 
  private Saalis hauki12; 
  private Saalis hauki21; 
  private Saalis hauki22; 
  private Saalis hauki23; 

  public void alustaSaalispaivakirja() {
  saalispaivakirja = new Saalispaivakirja(); 
  m1 = new Merkinta(); m1.vastaaPvm(); m1.rekisteroi(); 
  m2 = new Merkinta(); m2.vastaaPvm(); m2.rekisteroi(); 
  mid1 = m1.getTunnusNro(); 
  mid2 = m2.getTunnusNro(); 
  hauki11 = new Saalis(mid1); hauki11.vastaaHauki(mid1); 
  hauki12 = new Saalis(mid1); hauki12.vastaaHauki(mid1); 
  hauki21 = new Saalis(mid2); hauki21.vastaaHauki(mid2); 
  hauki22 = new Saalis(mid2); hauki22.vastaaHauki(mid2); 
  hauki23 = new Saalis(mid2); hauki23.vastaaHauki(mid2); 
  try {
  saalispaivakirja.lisaa(m1); 
  saalispaivakirja.lisaa(m2); 
  saalispaivakirja.lisaa(hauki11); 
  saalispaivakirja.lisaa(hauki12); 
  saalispaivakirja.lisaa(hauki21); 
  saalispaivakirja.lisaa(hauki22); 
  saalispaivakirja.lisaa(hauki23); 
   } catch ( Exception e) {
       System.err.println(e.getMessage()); 
   }
  }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaSaalis85 
   * @throws Exception when error
   */
  @Test
  public void testPoistaSaalis85() throws Exception {    // Saalispaivakirja: 85
    alustaSaalispaivakirja(); 
    assertEquals("From: Saalispaivakirja line: 88", 2, saalispaivakirja.annaSaaliit(m1).size()); 
    saalispaivakirja.poistaSaalis(hauki11); 
    assertEquals("From: Saalispaivakirja line: 90", 1, saalispaivakirja.annaSaaliit(m1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa103 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa103() throws SailoException {    // Saalispaivakirja: 103
    Saalispaivakirja saalispaivakirja = new Saalispaivakirja(); 
    Merkinta m1 = new Merkinta(), m2 = new Merkinta(); 
    m1.rekisteroi(); m2.rekisteroi(); 
    assertEquals("From: Saalispaivakirja line: 108", 0, saalispaivakirja.getMerkintoja()); 
    saalispaivakirja.lisaa(m1); assertEquals("From: Saalispaivakirja line: 109", 1, saalispaivakirja.getMerkintoja()); 
    saalispaivakirja.lisaa(m2); assertEquals("From: Saalispaivakirja line: 110", 2, saalispaivakirja.getMerkintoja()); 
    saalispaivakirja.lisaa(m1); assertEquals("From: Saalispaivakirja line: 111", 3, saalispaivakirja.getMerkintoja()); 
    assertEquals("From: Saalispaivakirja line: 112", 3, saalispaivakirja.getMerkintoja()); 
    assertEquals("From: Saalispaivakirja line: 113", m1, saalispaivakirja.annaMerkinta(0)); 
    assertEquals("From: Saalispaivakirja line: 114", m2, saalispaivakirja.annaMerkinta(1)); 
    assertEquals("From: Saalispaivakirja line: 115", m1, saalispaivakirja.annaMerkinta(2)); 
    try {
    assertEquals("From: Saalispaivakirja line: 116", m1, saalispaivakirja.annaMerkinta(3)); 
    fail("Saalispaivakirja: 116 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    saalispaivakirja.lisaa(m1); assertEquals("From: Saalispaivakirja line: 117", 4, saalispaivakirja.getMerkintoja()); 
    saalispaivakirja.lisaa(m1); assertEquals("From: Saalispaivakirja line: 118", 5, saalispaivakirja.getMerkintoja()); 
    saalispaivakirja.lisaa(m1); assertEquals("From: Saalispaivakirja line: 119", 6, saalispaivakirja.getMerkintoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa132 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa132() throws SailoException {    // Saalispaivakirja: 132
    alustaSaalispaivakirja(); 
    assertEquals("From: Saalispaivakirja line: 135", 2, saalispaivakirja.etsi("*",0).size()); 
    saalispaivakirja.korvaaTaiLisaa(m1); 
    assertEquals("From: Saalispaivakirja line: 137", 2, saalispaivakirja.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaSaaliit192 */
  @Test
  public void testAnnaSaaliit192() {    // Saalispaivakirja: 192
    Saalispaivakirja pk = new Saalispaivakirja(); 
    Merkinta m1 = new Merkinta(), m2 = new Merkinta(), m3 = new Merkinta(); 
    m1.rekisteroi(); m2.rekisteroi(); m3.rekisteroi(); 
    int id1 = m1.getTunnusNro(); 
    int id2 = m2.getTunnusNro(); 
    Saalis hauki1 = new Saalis(id1); pk.lisaa(hauki1); 
    Saalis hauki2 = new Saalis(id1); pk.lisaa(hauki2); 
    Saalis hauki3 = new Saalis(id2); pk.lisaa(hauki3); 
    Saalis hauki4 = new Saalis(id2); pk.lisaa(hauki4); 
    Saalis hauki5 = new Saalis(id2); pk.lisaa(hauki5); 
    List<Saalis> loytyneet; 
    loytyneet = pk.annaSaaliit(m3); 
    assertEquals("From: Saalispaivakirja line: 208", 0, loytyneet.size()); 
    loytyneet = pk.annaSaaliit(m1); 
    assertEquals("From: Saalispaivakirja line: 210", 2, loytyneet.size()); 
    assertEquals("From: Saalispaivakirja line: 211", true, loytyneet.get(0) == hauki1); 
    assertEquals("From: Saalispaivakirja line: 212", true, loytyneet.get(1) == hauki2); 
    loytyneet = pk.annaSaaliit(m2); 
    assertEquals("From: Saalispaivakirja line: 214", 3, loytyneet.size()); 
    assertEquals("From: Saalispaivakirja line: 215", true, loytyneet.get(0) == hauki3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta242 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta242() throws SailoException {    // Saalispaivakirja: 242
    String hakemisto = "h"; 
    File dir = new File(hakemisto); 
    File ftied  = new File(hakemisto+"/merkinnat.dat"); 
    File fhtied = new File(hakemisto+"/saaliit.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fhtied.delete(); 
    saalispaivakirja = new Saalispaivakirja(); 
    try {
    saalispaivakirja.lueTiedostosta(hakemisto); 
    fail("Saalispaivakirja: 255 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    alustaSaalispaivakirja(); 
    saalispaivakirja.setTiedosto(hakemisto); 
    saalispaivakirja.tallenna(); 
    saalispaivakirja = new Saalispaivakirja(); 
    saalispaivakirja.lueTiedostosta(hakemisto); 
    Collection<Merkinta> kaikki = saalispaivakirja.etsi("",-1); 
    Iterator<Merkinta> it = kaikki.iterator(); 
    assertEquals("From: Saalispaivakirja line: 263", m1, it.next()); 
    assertEquals("From: Saalispaivakirja line: 264", m2, it.next()); 
    assertEquals("From: Saalispaivakirja line: 265", false, it.hasNext()); 
    List<Saalis> loytyneet = saalispaivakirja.annaSaaliit(m1); 
    Iterator<Saalis> ih = loytyneet.iterator(); 
    assertEquals("From: Saalispaivakirja line: 268", hauki11, ih.next()); 
    assertEquals("From: Saalispaivakirja line: 269", hauki12, ih.next()); 
    assertEquals("From: Saalispaivakirja line: 270", false, ih.hasNext()); 
    loytyneet = saalispaivakirja.annaSaaliit(m2); 
    ih = loytyneet.iterator(); 
    assertEquals("From: Saalispaivakirja line: 273", hauki21, ih.next()); 
    assertEquals("From: Saalispaivakirja line: 274", hauki22, ih.next()); 
    assertEquals("From: Saalispaivakirja line: 275", hauki23, ih.next()); 
    assertEquals("From: Saalispaivakirja line: 276", false, ih.hasNext()); 
    saalispaivakirja.lisaa(m2); 
    saalispaivakirja.lisaa(hauki23); 
    saalispaivakirja.tallenna(); 
    assertEquals("From: Saalispaivakirja line: 280", true, ftied.delete()); 
    assertEquals("From: Saalispaivakirja line: 281", true, fhtied.delete()); 
    File fbak = new File(hakemisto+"/merkinnat.bak"); 
    File fhbak = new File(hakemisto+"/saaliit.bak"); 
    assertEquals("From: Saalispaivakirja line: 284", true, fbak.delete()); 
    assertEquals("From: Saalispaivakirja line: 285", true, fhbak.delete()); 
    assertEquals("From: Saalispaivakirja line: 286", true, dir.delete()); 
  } // Generated by ComTest END
}